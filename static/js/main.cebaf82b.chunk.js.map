{"version":3,"sources":["work1/Input.js","work1/List.js","work1/TodoList.js","index.js"],"names":["Input","handleChange","e","props","hand","addTodo","add","inpValue","this","id","ref","inp","input","value","type","onChange","onClick","Component","List","delTodo","index","dele","toggle","tog","renderTodos","done","todos","map","todo","idx","checked","dangerouslySetInnerHTML","__html","title","arr1","filter","item","arr2","length","TodoList","setState","target","state","alert","newTodos","JSON","parse","stringify","localStorage","getItem","console","log","ReactDOM","render","document","getElementById"],"mappings":"6KAEqBA,E,4MAEjBC,aAAe,SAACC,GACZ,EAAKC,MAAMC,KAAKF,I,EAEpBG,QAAU,WACN,EAAKF,MAAMG,O,uDAIL,IAAD,OAEDC,EAAWC,KAAKL,MAAMI,SAE1B,OACI,6BAGI,2BAAOE,GAAK,MACZC,IAAK,SAAAC,GAAG,OAAE,EAAKC,MAAQD,GACvBE,MAAON,EACPO,KAAK,OACLC,SAAYP,KAAKP,eAEjB,4BAAQe,QAASR,KAAKH,SAAtB,qB,GAxBmBY,aCAdC,E,4MAGjBC,QAAU,SAACC,GACP,EAAKjB,MAAMkB,KAAKD,I,EAEpBE,OAAS,SAACF,GACN,EAAKjB,MAAMoB,IAAIH,I,EAEnBI,YAAc,SAACC,GAEX,OADY,EAAKtB,MAAMuB,MACVC,KAAI,SAACC,EAAKC,GACnB,GAAGJ,GAAMG,EAAKH,KACV,OAAM,4BACF,2BAAOT,QAAS,kBAAI,EAAKM,OAAOO,IAChCC,QAASL,EAAMX,KAAK,aACpB,0BAAMiB,wBAAyB,CAACC,OAAOJ,EAAKK,SAC5C,4BACIjB,QAAW,kBAAI,EAAKG,QAAQU,KADhC,qB,uDAcZ,IAAIH,EAAQlB,KAAKL,MAAMuB,MACnBQ,EAAOR,EAAMS,QAAO,SAAAC,GAAI,OACvBA,EAAKX,QAENY,EAAOX,EAAMS,QAAO,SAAAC,GAAI,OACxBA,EAAKX,QAGT,OAEI,6BACI,uDAASS,EAAKI,QACd,4BAEQ9B,KAAKgB,aAAY,IAGzB,uDAASa,EAAKC,QACd,4BAEQ9B,KAAKgB,aAAY,S,GAnDPP,aCCbsB,E,kDACjB,aAAc,IAAD,8BACT,gBAmBJtC,aAAe,SAACC,GACZ,EAAKsC,SAAS,CAACjC,SAASL,EAAEuC,OAAO5B,SArBxB,EAwBbR,QAAU,WACkB,IAArB,EAAKqC,MAAMnC,UACV,EAAKiC,SAAS,CAACd,MAAM,CACT,CACIO,MAAM,EAAKS,MAAMnC,SAAUkB,MAAK,IAF5B,mBAIL,EAAKiB,MAAMhB,UAK1B,EAAKc,SACD,CAACjC,SAAS,MAIdoC,MAAM,yCAxCD,EA4CbxB,QAAU,SAACU,GAEP,EAAKW,SAAS,CACVd,MAAM,EAAKgB,MAAMhB,MAAMS,QAAO,SAACC,EAAKhB,GAAN,OAAcA,GAASS,QA/ChD,EAkDbP,OAAS,SAACF,GACN,IAAIwB,EAAUC,KAAKC,MAAMD,KAAKE,UAAU,EAAKL,MAAMhB,QAEnDkB,EAASxB,GAAOK,MAAOmB,EAASxB,GAAOK,KACvC,EAAKe,SAAS,CACVd,MAAMkB,KArDV,EAAKF,MAAQ,CACTnC,SAAW,GACXmB,MAAM,IAJD,E,gEAWT,IAAIA,EAAQsB,aAAaC,QAAQ,SAC9BvB,IACCwB,QAAQC,IAAIzB,GACZlB,KAAKgC,SAAS,O,+BA8ClB,OACI,6BACI,kBAAC,EAAD,CAAOjC,SAAYC,KAAKkC,MAAMnC,SAC9BmB,MAASlB,KAAKkC,MAAMhB,MACpBpB,IAAOE,KAAKH,QACZD,KAAQI,KAAKP,eACb,kBAAC,EAAD,CAAMoB,KAAQb,KAAKW,QACnBI,IAAOf,KAAKc,OACZI,MAASlB,KAAKkC,MAAMhB,a,GArEET,aCUtCmC,IAASC,OACP,6BAAK,kBAAC,EAAD,OACLC,SAASC,eAAe,U","file":"static/js/main.cebaf82b.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Input extends Component {\r\n      \r\n    handleChange = (e)=>{\r\n        this.props.hand(e);\r\n    }\r\n    addTodo = ()=>{\r\n        this.props.add();\r\n    }\r\n    \r\n\r\n    render() {\r\n        \r\n        let inpValue = this.props.inpValue;\r\n        \r\n        return (\r\n            <div>\r\n                {/* <label htmlFor=\"inp\">todolist</label> */}\r\n                \r\n                <input id = \"inp\" \r\n                ref={inp=>this.input = inp} \r\n                value={inpValue} \r\n                type=\"text\" \r\n                onChange = {this.handleChange} />\r\n\r\n                <button onClick={this.addTodo}>添加</button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class List extends Component {\r\n\r\n\r\n    delTodo = (index)=>{\r\n        this.props.dele(index)\r\n    }\r\n    toggle = (index)=>{\r\n        this.props.tog(index);\r\n    }\r\n    renderTodos = (done)=>{\r\n        let todos = this.props.todos;\r\n        return todos.map((todo,idx)=>{\r\n            if(done==todo.done){\r\n                return<li>\r\n                    <input onClick={()=>this.toggle(idx)}\r\n                    checked={done} type=\"checkbox\" />\r\n                    <span dangerouslySetInnerHTML={{__html:todo.title}}></span>\r\n                    <button \r\n                        onClick = {()=>this.delTodo(idx)}\r\n                    >\r\n                        删除\r\n                    </button>\r\n\r\n                </li>\r\n            }\r\n            \r\n            \r\n        })\r\n    }\r\n\r\n    render() {\r\n        let todos = this.props.todos;\r\n        let arr1 = todos.filter(item=>\r\n            !item.done\r\n        );\r\n        let arr2 = todos.filter(item=>\r\n            item.done\r\n        );\r\n        \r\n        return (\r\n            \r\n            <div>\r\n                <h2>正在进行{arr1.length}</h2>\r\n                <ul>\r\n                    {\r\n                        this.renderTodos(false)\r\n                    }\r\n                </ul>\r\n                <h2>已经完成{arr2.length}</h2>\r\n                <ul>\r\n                    {\r\n                        this.renderTodos(true)\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}","import React,{Component} from 'react'\r\nimport Input from './Input'\r\nimport List from './List'\r\nexport default class TodoList extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            inpValue : '',\r\n            todos:[\r\n            ]\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        \r\n        let todos = localStorage.getItem('todos');\r\n        if(todos){\r\n            console.log(todos);\r\n            this.setState({\r\n                \r\n                //todos:JSON.parse(todos)\r\n            })\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({inpValue:e.target.value})\r\n    }\r\n\r\n    addTodo = ()=>{\r\n        if(this.state.inpValue!=\"\"){\r\n            this.setState({todos: [\r\n                        {\r\n                            title:this.state.inpValue, done:false\r\n                        },\r\n                        ...this.state.todos\r\n                        \r\n                    ]\r\n                    \r\n            })\r\n            this.setState(\r\n                {inpValue:\"\"}\r\n            )\r\n        }\r\n        else{\r\n            alert(\"输入不能为空\");\r\n        }\r\n    }\r\n\r\n    delTodo = (idx)=>{\r\n        // let todos = this.props.todos;\r\n        this.setState({\r\n            todos:this.state.todos.filter((item,index)=>index != idx )\r\n        });\r\n    }\r\n    toggle = (index)=>{\r\n        let newTodos =JSON.parse(JSON.stringify(this.state.todos)) \r\n\r\n        newTodos[index].done =!newTodos[index].done\r\n        this.setState({\r\n            todos:newTodos\r\n        })\r\n    }\r\n    render() {\r\n        \r\n        return (\r\n            <div>\r\n                <Input inpValue = {this.state.inpValue}\r\n                todos = {this.state.todos}\r\n                add = {this.addTodo}\r\n                hand = {this.handleChange}/>\r\n                <List dele = {this.delTodo}\r\n                tog = {this.toggle} \r\n                todos = {this.state.todos}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import Home from './pages/Home';\n// import Control from './components/Control';\n// import Demo01 from './pages/Demo01';\n// import App from './pages/App';\n// import Hoc,{Detail} from './pages/Hoc';\n// import Hook from './pages/Hook'\n// import Context from './pages/context'\n// console.log(Context);\nimport TodoList from './work1/TodoList'\n\n\nReactDOM.render(\n  <div><TodoList/></div>,\n  document.getElementById('root')\n);\n\n\n// 实现带有本地存储的todolist功能（类组件实现）：\n\n// 最外层index.js里render(<TodoList/>,xx)\n// TodoList组件里包含Input和List两个组件\n// 输入框输入时不进行本地存储（使用componentDidUpdate）\n\n// 写完进行npm run build,将打包完的静态传到github，\n// 设置github pages，雪梨提交网页链接和四个文件的代码\n\n\n\n\n\n// alt shift + 上下键   复制一行\n// alt + 上下键         移动一行\n// 按住alt ，鼠标点击\n// Ctrl + shift + 左右键，选中整个单词\n// ctrl+shift+L \n\n// 组件声明\n// 函数组件\n// UI（展示）组件，木偶组件\n// function App(props){\n//   const { title, id } = props;\n//   return <div>\n//     <h1>App组件内容</h1>\n//     <div>{title}</div>\n//     <div>{id}</div>\n//   </div>\n// }\n// // 智能组件\n// class Demo extends React.Component{\n//   constructor(){\n//      super();\n//     //  声明状态\n//      this.state = {\n//        name: new Date().toLocaleString()\n//      }\n//      setInterval(()=>{\n//       this.setState({name:new Date().toLocaleString()})\n//      },1000)\n//   }\n//   render(){\n//     return <div>\n//       <div>name:{this.state.name}</div>\n//       <App title={this.state.name} id='app'/>\n//     </div>\n//   }\n// }\n\n\n\n\n\n// let ele = React.createElement(\n//   'h1',\n//   {id:'title'},\n//   React.createElement('div',{},'hello'),\n//   'react'\n// )\n\n// 将jsx对象渲染到DOM中\n// let ReactDOM = {\n//   render(eleObj,container){\n//     // 解构\n//     const { type,props } = eleObj;\n//     // 创建第一层节点\n//     let ele = document.createElement(type);\n//     // 遍历属性对象，将属性添加到第一层节点对象上\n//     for (const prop in props) {\n//       console.log(prop)\n//       if(prop == 'children'){\n//         if(typeof props.children == 'string'){\n//             const txtNode = document.createTextNode(props.children);\n//             ele.appendChild(txtNode);\n//             break;\n//         }\n//         // 将第一层节点对象的子元素添加进去\n//         props.children.forEach( child => {\n//           if(typeof child == 'string'){\n//             const txtNode = document.createTextNode(child);\n//             ele.appendChild(txtNode);\n//           }else{\n//             ReactDOM.render(child,ele);\n//           }\n//         })\n//       }else{\n//         ele[prop] = props[prop];\n//       }\n//     }\n\n//     // 将第一层DOM节点添加到container中\n//     container.appendChild(ele);\n//   }\n// }\n\n\n\n\n\n  // 1、原生JS，DOM操作（jQ）\n  // 2、React：开发效率高、性能高\n  // 3、环境搭建、创建一个项目、运行\n  // 4、JSX语法\n\n  \n\n\n"],"sourceRoot":""}